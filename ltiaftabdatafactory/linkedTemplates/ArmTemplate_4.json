{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ltiaftabdatafactory"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pipelineCopyMyCsvToJson')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ActivityCopyCsvToJson",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "MyDatasetINCsv",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "MyDatasetOUTJson",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "MyCopyCsvToJson"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-18T09:21:32Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineIncrementalCopy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ActivityLookupWatermark",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from watermarktable where TableName='data_source_table' ;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DatasetINaftabdbWatermark",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "ActivityLookupNewWatermark",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select MAX(LastModifytime) as NewWatermarkvalue from data_source_table",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DatasetINaftabdbFactTable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "ActivityCopyIncremental",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ActivityLookupWatermark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ActivityLookupNewWatermark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from data_source_table where LastModifytime > '@{activity('ActivityLookupWatermark').output.firstRow.WatermarkValue}' and LastModifytime <= '@{activity('ActivityLookupNewWatermark').output.firstRow.NewWatermarkvalue}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DatasetINaftabdbFactTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DatasetOUTaftabstoragenewINCRE",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "UpdateNewWatermark",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ActivityCopyIncremental",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_write_watermark]",
							"storedProcedureParameters": {
								"LastModifiedtime": {
									"value": {
										"value": "@{activity('ActivityLookupNewWatermark').output.firstRow.NewWatermarkvalue}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"TableName": {
									"value": {
										"value": "@{activity('ActivityLookupWatermark').output.firstRow.TableName}",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Incrementalcopy"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-19T18:28:59Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelinecopyDbToStore')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupDbTableList",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT TABLE_NAME, TABLE_SCHEMA\nFROM information_schema.TABLES\nWHERE TABLE_TYPE ='BASE TABLE' and TABLE-SCHEMA ='sales.customer'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DatasetBulkCopyINdb",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "ForEach",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupDbTableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupDBTableList').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "CopyDBtoStore",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT * FROM @{item().TABLE_Name}.@{item().TABLE_Schema}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 2,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DatasetCopyINDB",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DataSetOUTcsvFILE",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "@item().TableName",
													"type": "Expression"
												},
												"TableSchema": {
													"value": "@item().TableSchema",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "BulkCopDbToStore"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-17T05:54:35Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelinecopycsvtoparquet')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "csvtoparquetconversion",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"dataIntegrationUnits": 2,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Loan_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Loan_ID",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Gender",
											"type": "Int32",
											"physicalType": "String"
										},
										"sink": {
											"name": "Gender",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Marital",
											"type": "Int32",
											"physicalType": "String"
										},
										"sink": {
											"name": "Marital",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Dependents",
											"type": "Int32",
											"physicalType": "String"
										},
										"sink": {
											"name": "Dependents",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Education",
											"type": "Int32",
											"physicalType": "String"
										},
										"sink": {
											"name": "Education",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "SelfEmplo",
											"type": "Int32",
											"physicalType": "String"
										},
										"sink": {
											"name": "SelfEmplo",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "ApplIncome",
											"type": "Double",
											"physicalType": "String"
										},
										"sink": {
											"name": "ApplIncome",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "CoApplIncome",
											"type": "Double",
											"physicalType": "String"
										},
										"sink": {
											"name": "CoApplIncome",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Loan Amt",
											"type": "Double",
											"physicalType": "String"
										},
										"sink": {
											"name": "LoanAmt",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "PropArea",
											"type": "Int32",
											"physicalType": "String"
										},
										"sink": {
											"name": "PropArea",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "LoanStatus",
											"type": "Int32",
											"physicalType": "String"
										},
										"sink": {
											"name": "LoanStatus",
											"type": "String",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "csvformatforconversion",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "parquetoutput",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-09-15T07:54:35Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelinecopycsvtoparquetfileformat')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "activitycopycsvtoparquet",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Id",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Loan_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Loan_ID",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Gender",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Gender",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Marital",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Marital",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Dependents",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Dependents",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Education",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Education",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "SelfEmplo",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SelfEmplo",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "ApplIncome",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ApplIncome",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "CoApplIncome",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CoApplIncome",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Loan Amt",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LoanAmt",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Term",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Term",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "CreditHistory",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CreditHistory",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "PropArea",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PropArea",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "LoanStatus",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LoanStatus",
											"type": "String",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dataINCSVFILE",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DATAOUTParquet",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "CSVtoPARQUETfileFORMAT"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-16T18:01:47Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelinecopycustomerdbtostore')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copydatactivitycustomerdbtostore",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "AddressID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "AddressID",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "AddressLine1",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "AddressLine1",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "AddressLine2",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "AddressLine2",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "City",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "City",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "StateProvince",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "StateProvince",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "CountryRegion",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "CountryRegion",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "PostalCode",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "PostalCode",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "rowguid",
											"type": "Guid",
											"physicalType": "uniqueidentifier"
										},
										"sink": {
											"name": "rowguid",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "datasetltiaftabsqldbcustomer",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "datasetltioutaftabltiaftabstore",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "customerdbtostore"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-15T09:59:43Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelinecopyloanstoretodb')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Activitycopyloanstoretodata",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": 2,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Id",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Loan_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Loan_ID",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Gender",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Gender",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Marital",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Marital",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Dependents",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Dependents",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Education",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Education",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "SelfEmplo",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SelfEmplo",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "ApplIncome",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ApplIncome",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "CoApplIncome",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CoApplIncome",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Loan Amt",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Loan Amt",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "PropArea",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PropArea",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "LoanStatus",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LoanStatus",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "datasetINstoreloan",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "datasetOUTsqlLoan",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-09-15T10:06:20Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelinecopymergelocation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ActivityCopymergelocation",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "location",
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "datasetINfilelocation",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "datasetOUTfilelocation",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "merge"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-17T11:42:21Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelinecopyparquet')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Activitycopycsvtoparquet",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"dataIntegrationUnits": 2,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Id",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Loan_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Loan_ID",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Gender",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Gender",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Marital",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Marital",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Dependents",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Dependents",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Education",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Education",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "SelfEmplo",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SelfEmplo",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "ApplIncome",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ApplIncome",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "CoApplIncome",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CoApplIncome",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Loan Amt",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LoanAmt",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "PropArea",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PropArea",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "LoanStatus",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LoanStatus",
											"type": "String",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DatasetINCSVformat",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DatasetOUTParquet",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-09-15T17:48:01Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelinecopyparquettocsv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Activitycopyparquettocsv",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"dataIntegrationUnits": 2,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DateID",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "DateID",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "MedallionID",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "MedallionID",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "HackneyLicenseID",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "HackneyLicenseID",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "PickupTimeID",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "PickupTimeID",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "DropoffTimeID",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "DropoffTimeID",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "PickupGeographyID",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "PickupGeographyID",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "DropoffGeographyID",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "DropoffGeographyID",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "PickupLatitude",
											"type": "Double",
											"physicalType": "DOUBLE"
										},
										"sink": {
											"name": "PickupLatitude",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "PickupLongitude",
											"type": "Double",
											"physicalType": "DOUBLE"
										},
										"sink": {
											"name": "PickupLongitude",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "PickupLatLong",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "PickupLatLong",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "DropoffLatitude",
											"type": "Double",
											"physicalType": "DOUBLE"
										},
										"sink": {
											"name": "DropoffLatitude",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "DropoffLongitude",
											"type": "Double",
											"physicalType": "DOUBLE"
										},
										"sink": {
											"name": "DropoffLongitude",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "DropoffLatLong",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "DropoffLatLong",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "PassengerCount",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "PassengerCount",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "TripDurationSeconds",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "TripDurationSeconds",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "TripDistanceMiles",
											"type": "Double",
											"physicalType": "DOUBLE"
										},
										"sink": {
											"name": "TripDistanceMiles",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "PaymentType",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "PaymentType",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "FareAmount",
											"type": "Decimal",
											"physicalType": "DECIMAL",
											"scale": 4,
											"precision": 19
										},
										"sink": {
											"name": "FareAmount",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "SurchargeAmount",
											"type": "Decimal",
											"physicalType": "DECIMAL",
											"scale": 4,
											"precision": 19
										},
										"sink": {
											"name": "SurchargeAmount",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "TaxAmount",
											"type": "Decimal",
											"physicalType": "DECIMAL",
											"scale": 4,
											"precision": 19
										},
										"sink": {
											"name": "TaxAmount",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "TipAmount",
											"type": "Decimal",
											"physicalType": "DECIMAL",
											"scale": 4,
											"precision": 19
										},
										"sink": {
											"name": "TipAmount",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "TollsAmount",
											"type": "Decimal",
											"physicalType": "DECIMAL",
											"scale": 4,
											"precision": 19
										},
										"sink": {
											"name": "TollsAmount",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "TotalAmount",
											"type": "Decimal",
											"physicalType": "DECIMAL",
											"scale": 4,
											"precision": 19
										},
										"sink": {
											"name": "TotalAmount",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DatasetINParquetToCsv",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DatasetOUTcsv",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-09-15T18:07:59Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelinecpyDBTOSTORE')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from [SalesLT].[Customer] where Title='Mr.';",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DatasetINSQL",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DatasetOUTBLOB",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "NEWDbToStore"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-19T05:07:13Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelinecsvtoDB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DelimitedcsvIN",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "datasetDATABASEOUT",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "new"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-16T18:18:20Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelinedbtostoretoadl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Activitycopydbtostore",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"dataIntegrationUnits": 2,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "AddressID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "AddressID",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "AddressLine1",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "AddressLine1",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "AddressLine2",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "AddressLine2",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "City",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "City",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "StateProvince",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "StateProvince",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "CountryRegion",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "CountryRegion",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "PostalCode",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "PostalCode",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "rowguid",
											"type": "Guid",
											"physicalType": "uniqueidentifier"
										},
										"sink": {
											"name": "rowguid",
											"type": "Guid",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "ModifiedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "ModifiedDate",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "datasetproductINsqlDb",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "datasetproductOUTstoreparquet",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Activitycopystoretoadl",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Activitycopydbtostore",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "datasetproductINstoreparquet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "datasetproductOUTadlCsv",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Productdbtostoreadl"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-15T11:34:27Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineinvoke')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT TABLE_SCHEMA, TABLE_NAME \nFROM information_schema.TABLES \nWHERE TABLE_TYPE = 'BASE TABLE' and TABLE_SCHEMA = 'SalesLT' and TABLE_NAME ='Customer' ",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "ivoke"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-17T09:55:39Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataFlowProject')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DatasetINProductTable",
								"type": "DatasetReference"
							},
							"name": "source"
						},
						{
							"dataset": {
								"referenceName": "DatasetINProductTable",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DatasetOUTProductNW",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "AddingIsActive"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductID as integer,",
						"          Name as string,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          StandardCost as decimal(19,4),",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          Weight as decimal(8,2),",
						"          ProductCategoryID as integer,",
						"          ProductModelID as integer,",
						"          SellStartDate as timestamp,",
						"          SellEndDate as timestamp,",
						"          DiscontinuedDate as timestamp,",
						"          ThumbNailPhoto as binary,",
						"          ThumbnailPhotoFileName as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source",
						"source(output(",
						"          ProductID as integer,",
						"          Name as string,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          StandardCost as decimal(19,4),",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          Weight as decimal(8,2),",
						"          ProductCategoryID as integer,",
						"          ProductModelID as integer,",
						"          SellStartDate as timestamp,",
						"          SellEndDate as timestamp,",
						"          DiscontinuedDate as timestamp,",
						"          ThumbNailPhoto as binary,",
						"          ThumbnailPhotoFileName as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source derive(IsActive = 1) ~> AddingIsActive",
						"source1 select(mapColumn(",
						"          ProductID,",
						"          Name,",
						"          ProductNumber,",
						"          Color,",
						"          StandardCost,",
						"          ListPrice,",
						"          Size,",
						"          Weight,",
						"          ProductCategoryID,",
						"          ProductModelID,",
						"          SellStartDate,",
						"          SellEndDate,",
						"          DiscontinuedDate,",
						"          ThumbNailPhoto,",
						"          ThumbnailPhotoFileName,",
						"          rowguid,",
						"          ModifiedDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"AddingIsActive sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          SalesRepID as integer,",
						"          RepSourceId as integer,",
						"          First_Name as string,",
						"          Last_Name as string,",
						"          Region as string,",
						"          IsActive as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Scd2New')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DatasetSCD2INCSV",
								"type": "DatasetReference"
							},
							"name": "Empfile"
						},
						{
							"dataset": {
								"referenceName": "DatasetSCD2OUTEmployeetable",
								"type": "DatasetReference"
							},
							"name": "Empltable"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DatasetSCD2OUTEmployeetable",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "AddingIsActive"
						},
						{
							"name": "select1"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "ExisitingRows"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as integer,",
						"          empname as string,",
						"          gender as string,",
						"          country as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Empfile",
						"source(output(",
						"          surrKey as integer,",
						"          empid as integer,",
						"          empname as string,",
						"          gender as string,",
						"          country as string,",
						"          isActive as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Empltable",
						"Empfile derive(IsActive = 1) ~> AddingIsActive",
						"Empltable select(mapColumn(",
						"          SQL_surrKey = surrKey,",
						"          SQL_empid = empid,",
						"          SQL_empname = empname,",
						"          SQL_gender = gender,",
						"          SQL_country = country,",
						"          SQL_isActive = isActive",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"Empfile, select1 lookup(empid == SQL_empid,",
						"     multiple: true,",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 filter(isNull(SQL_empid)) ~> ExisitingRows",
						"AddingIsActive sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          empid,",
						"          empname,",
						"          gender,",
						"          country,",
						"          IsActive",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCD2NEW_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "ProjectGladiator"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Product1IN",
								"type": "DatasetReference"
							},
							"name": "Product1"
						},
						{
							"dataset": {
								"referenceName": "ProductnwOUT",
								"type": "DatasetReference"
							},
							"name": "Productnw"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ProductnwOUT",
								"type": "DatasetReference"
							},
							"name": "sinkUpdate"
						},
						{
							"dataset": {
								"referenceName": "ProductnwOUT",
								"type": "DatasetReference"
							},
							"name": "sinkChanged"
						}
					],
					"transformations": [
						{
							"name": "pidcheck"
						},
						{
							"name": "Split"
						},
						{
							"name": "selectcol"
						},
						{
							"name": "costcheck"
						},
						{
							"name": "filterchangedcost"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "changename"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "selectnw"
						},
						{
							"name": "selectproduct1"
						},
						{
							"name": "sDateActice"
						},
						{
							"name": "union1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductID as integer,",
						"          Name as string,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          StandardCost as decimal(19,4),",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          Weight as decimal(8,2),",
						"          ProductCategoryID as integer,",
						"          ProductModelID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Product1",
						"source(output(",
						"          surrKey as integer,",
						"          ProductID as integer,",
						"          Name as string,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          StandardCost as decimal(19,4),",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          Weight as decimal(18,0),",
						"          ProductCategory as integer,",
						"          ProductModelID as integer,",
						"          StartDate as date,",
						"          EndDate as date,",
						"          iscurrent as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Productnw",
						"Product1, changename lookup(ProductID == {nw-ProductID},",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> pidcheck",
						"pidcheck split(!isNull({nw-ProductID}),",
						"     isNull({nw-ProductID}),",
						"     disjoint: true) ~> Split@(old, new, All)",
						"Split@old select(mapColumn(",
						"          ProductID,",
						"          Name,",
						"          ProductNumber,",
						"          Color,",
						"          StandardCost,",
						"          ListPrice,",
						"          Size,",
						"          Weight,",
						"          ProductCategoryID,",
						"          ProductModelID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectcol",
						"selectcol, changename lookup(ProductID == {nw-ProductID}",
						"     && StandardCost != {nw-StandardCost},",
						"     multiple: true,",
						"     broadcast: 'right')~> costcheck",
						"costcheck filter(!isNull({nw-ProductID})) ~> filterchangedcost",
						"selectnw derive(iscurrent = 0,",
						"          EndDate = currentDate()) ~> derivedColumn2",
						"Productnw select(mapColumn(",
						"          {nw-surrKey} = surrKey,",
						"          {nw-ProductID} = ProductID,",
						"          {nw-Name} = Name,",
						"          {nw-ProductNumber} = ProductNumber,",
						"          {nw-Color} = Color,",
						"          {nw-StandardCost} = StandardCost,",
						"          {nw-ListPrice} = ListPrice,",
						"          {nw-Size} = Size,",
						"          {nw-Weight} = Weight,",
						"          {nw-ProductCategory} = ProductCategory,",
						"          {nw-ProductModelID} = ProductModelID,",
						"          {nw-StartDate} = StartDate,",
						"          {nw-EndDate} = EndDate,",
						"          {nw-iscurrent} = iscurrent",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> changename",
						"derivedColumn2 alterRow(updateIf(1==1)) ~> AlterRow1",
						"filterchangedcost select(mapColumn(",
						"          {nw-surrKey},",
						"          {nw-ProductID},",
						"          {nw-Name},",
						"          {nw-ProductNumber},",
						"          {nw-Color},",
						"          {nw-StandardCost},",
						"          {nw-ListPrice},",
						"          {nw-Size},",
						"          {nw-Weight},",
						"          {nw-ProductCategory},",
						"          {nw-ProductModelID},",
						"          {nw-StartDate},",
						"          {nw-EndDate},",
						"          {nw-iscurrent}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectnw",
						"union1 select(mapColumn(",
						"          ProductID,",
						"          Name,",
						"          ProductNumber,",
						"          Color,",
						"          StandardCost,",
						"          ListPrice,",
						"          Size,",
						"          Weight,",
						"          ProductCategoryID,",
						"          ProductModelID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectproduct1",
						"selectproduct1 derive(isActive = 1,",
						"          StartDate = currentDate()) ~> sDateActice",
						"filterchangedcost, Split@new union(byName: true)~> union1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          surrKey as integer,",
						"          ProductID as integer,",
						"          Name as string,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          StandardCost as decimal(19,4),",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          Weight as decimal(18,0),",
						"          ProductCategory as integer,",
						"          ProductModelID as integer,",
						"          StartDate as date,",
						"          EndDate as date,",
						"          iscurrent as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['surrKey'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          surrKey = {nw-surrKey},",
						"          ProductID = {nw-ProductID},",
						"          Name = {nw-Name},",
						"          ProductNumber = {nw-ProductNumber},",
						"          Color = {nw-Color},",
						"          StandardCost = {nw-StandardCost},",
						"          ListPrice = {nw-ListPrice},",
						"          Size = {nw-Size},",
						"          Weight = {nw-Weight},",
						"          ProductCategory = {nw-ProductCategory},",
						"          ProductModelID = {nw-ProductModelID},",
						"          StartDate = {nw-StartDate},",
						"          EndDate,",
						"          iscurrent",
						"     )) ~> sinkUpdate",
						"sDateActice sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          surrKey as integer,",
						"          ProductID as integer,",
						"          Name as string,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          StandardCost as decimal(19,4),",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          Weight as decimal(18,0),",
						"          ProductCategory as integer,",
						"          ProductModelID as integer,",
						"          StartDate as date,",
						"          EndDate as date,",
						"          iscurrent as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ProductID,",
						"          Name,",
						"          ProductNumber,",
						"          Color,",
						"          StandardCost,",
						"          ListPrice,",
						"          Size,",
						"          Weight,",
						"          ProductCategory = ProductCategoryID,",
						"          ProductModelID,",
						"          StartDate,",
						"          iscurrent = isActive",
						"     )) ~> sinkChanged"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SlowChangeDimType1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "SlowlyChangingDimType1"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DatasetINSqlStgCustomer",
								"type": "DatasetReference"
							},
							"name": "SourceStgCustomer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DatasetOUTSqlDimCustomer",
								"type": "DatasetReference"
							},
							"name": "SinkDimCustomer"
						}
					],
					"transformations": [
						{
							"name": "UpsertRecords"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Cust_Number as integer,",
						"          Customer_Name as string,",
						"          Customer_Company as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> SourceStgCustomer",
						"SourceStgCustomer alterRow(upsertIf(true())) ~> UpsertRecords",
						"UpsertRecords sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Cust_Number as integer,",
						"          Customer_Name as string,",
						"          Customer_Company as string",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['Cust_Number'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> SinkDimCustomer"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dataflowIN",
								"type": "DatasetReference"
							},
							"name": "TransformSourceLoanData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DatasetINN",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "datasetOUTT",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "TransformTotalINcome"
						},
						{
							"name": "TransformSelect"
						},
						{
							"name": "TransformFilterforDependence"
						},
						{
							"name": "StreamForMale"
						},
						{
							"name": "sort1"
						},
						{
							"name": "sort2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as short,",
						"          Loan_ID as string,",
						"          Gender as boolean,",
						"          Marital as boolean,",
						"          Dependents as short,",
						"          Education as boolean,",
						"          SelfEmplo as boolean,",
						"          ApplIncome as integer,",
						"          CoApplIncome as double,",
						"          {Loan Amt} as short,",
						"          Term as double,",
						"          CreditHistory as boolean,",
						"          PropArea as short,",
						"          LoanStatus as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> TransformSourceLoanData",
						"TransformSourceLoanData derive(TotalIncome = ApplIncome+CoApplIncome) ~> TransformTotalINcome",
						"TransformTotalINcome select(mapColumn(",
						"          Id,",
						"          Loan_ID,",
						"          Gender,",
						"          Dependents,",
						"          {Loan Amt},",
						"          TotalIncome",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TransformSelect",
						"TransformSelect filter(Dependents<2) ~> TransformFilterforDependence",
						"TransformFilterforDependence split(Gender==true(),",
						"     Gender==false(),",
						"     disjoint: true) ~> StreamForMale@(StreamForMale, StreamForFemale, Default)",
						"StreamForMale@StreamForMale sort(desc(TotalIncome, true)) ~> sort1",
						"StreamForMale@StreamForFemale sort(desc(TotalIncome, true)) ~> sort2",
						"sort1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['male'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1",
						"sort2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['female'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink2"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowSCD2sqlTosql')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "ProjectGladiator"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Product1IN",
								"type": "DatasetReference"
							},
							"name": "Product1"
						},
						{
							"dataset": {
								"referenceName": "ProductnwOUT",
								"type": "DatasetReference"
							},
							"name": "Productnw"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ProductnwOUT",
								"type": "DatasetReference"
							},
							"name": "sinkNew"
						},
						{
							"dataset": {
								"referenceName": "ProductnwOUT",
								"type": "DatasetReference"
							},
							"name": "sinkUpdate"
						},
						{
							"dataset": {
								"referenceName": "ProductnwOUT",
								"type": "DatasetReference"
							},
							"name": "sinkChanged"
						}
					],
					"transformations": [
						{
							"name": "pidcheck"
						},
						{
							"name": "Split"
						},
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select2"
						},
						{
							"name": "costcheck"
						},
						{
							"name": "filterchangedcost"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "changename"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "selectnw"
						},
						{
							"name": "selectproduct1"
						},
						{
							"name": "sDateActice"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductID as integer,",
						"          Name as string,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          StandardCost as decimal(19,4),",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          Weight as decimal(8,2),",
						"          ProductCategoryID as integer,",
						"          ProductModelID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Product1",
						"source(output(",
						"          surrKey as integer,",
						"          ProductID as integer,",
						"          Name as string,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          StandardCost as decimal(19,4),",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          Weight as decimal(18,0),",
						"          ProductCategory as integer,",
						"          ProductModelID as integer,",
						"          StartDate as date,",
						"          EndDate as date,",
						"          iscurrent as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Productnw",
						"Product1, changename lookup(ProductID == {nw-ProductID},",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> pidcheck",
						"pidcheck split(!isNull({nw-ProductID}),",
						"     isNull({nw-ProductID}),",
						"     disjoint: true) ~> Split@(old, new, All)",
						"Split@new select(mapColumn(",
						"          ProductID,",
						"          Name,",
						"          ProductNumber,",
						"          Color,",
						"          StandardCost,",
						"          ListPrice,",
						"          Size,",
						"          Weight,",
						"          ProductCategoryID,",
						"          ProductModelID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(StartDate = currentDate(),",
						"          isCurrent = 1) ~> derivedColumn1",
						"Split@old select(mapColumn(",
						"          ProductID,",
						"          Name,",
						"          ProductNumber,",
						"          Color,",
						"          StandardCost,",
						"          ListPrice,",
						"          Size,",
						"          Weight,",
						"          ProductCategoryID,",
						"          ProductModelID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2, changename lookup(ProductID == {nw-ProductID}",
						"     && StandardCost != {nw-StandardCost},",
						"     multiple: true,",
						"     broadcast: 'right')~> costcheck",
						"costcheck filter(!isNull({nw-ProductID})) ~> filterchangedcost",
						"selectnw derive(iscurrent = 0,",
						"          EndDate = currentDate()) ~> derivedColumn2",
						"Productnw select(mapColumn(",
						"          {nw-surrKey} = surrKey,",
						"          {nw-ProductID} = ProductID,",
						"          {nw-Name} = Name,",
						"          {nw-ProductNumber} = ProductNumber,",
						"          {nw-Color} = Color,",
						"          {nw-StandardCost} = StandardCost,",
						"          {nw-ListPrice} = ListPrice,",
						"          {nw-Size} = Size,",
						"          {nw-Weight} = Weight,",
						"          {nw-ProductCategory} = ProductCategory,",
						"          {nw-ProductModelID} = ProductModelID,",
						"          {nw-StartDate} = StartDate,",
						"          {nw-EndDate} = EndDate,",
						"          {nw-iscurrent} = iscurrent",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> changename",
						"derivedColumn2 alterRow(updateIf(1==1)) ~> AlterRow1",
						"filterchangedcost select(mapColumn(",
						"          {nw-surrKey},",
						"          {nw-ProductID},",
						"          {nw-Name},",
						"          {nw-ProductNumber},",
						"          {nw-Color},",
						"          {nw-StandardCost},",
						"          {nw-ListPrice},",
						"          {nw-Size},",
						"          {nw-Weight},",
						"          {nw-ProductCategory},",
						"          {nw-ProductModelID},",
						"          {nw-StartDate},",
						"          {nw-EndDate},",
						"          {nw-iscurrent}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectnw",
						"filterchangedcost select(mapColumn(",
						"          ProductID,",
						"          Name,",
						"          ProductNumber,",
						"          Color,",
						"          StandardCost,",
						"          ListPrice,",
						"          Size,",
						"          Weight,",
						"          ProductCategoryID,",
						"          ProductModelID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectproduct1",
						"selectproduct1 derive(isActive = 1,",
						"          StartDate = currentDate()) ~> sDateActice",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          surrKey as integer,",
						"          ProductID as integer,",
						"          Name as string,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          StandardCost as decimal(19,4),",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          Weight as decimal(18,0),",
						"          ProductCategory as integer,",
						"          ProductModelID as integer,",
						"          StartDate as date,",
						"          EndDate as date,",
						"          iscurrent as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ProductID,",
						"          Name,",
						"          ProductNumber,",
						"          Color,",
						"          StandardCost,",
						"          ListPrice,",
						"          Size,",
						"          Weight,",
						"          ProductModelID,",
						"          StartDate,",
						"          iscurrent = isCurrent",
						"     )) ~> sinkNew",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          surrKey as integer,",
						"          ProductID as integer,",
						"          Name as string,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          StandardCost as decimal(19,4),",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          Weight as decimal(18,0),",
						"          ProductCategory as integer,",
						"          ProductModelID as integer,",
						"          StartDate as date,",
						"          EndDate as date,",
						"          iscurrent as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['surrKey'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          surrKey = {nw-surrKey},",
						"          ProductID = {nw-ProductID},",
						"          Name = {nw-Name},",
						"          ProductNumber = {nw-ProductNumber},",
						"          Color = {nw-Color},",
						"          StandardCost = {nw-StandardCost},",
						"          ListPrice = {nw-ListPrice},",
						"          Size = {nw-Size},",
						"          Weight = {nw-Weight},",
						"          ProductCategory = {nw-ProductCategory},",
						"          ProductModelID = {nw-ProductModelID},",
						"          StartDate = {nw-StartDate},",
						"          EndDate,",
						"          iscurrent",
						"     )) ~> sinkUpdate",
						"sDateActice sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          surrKey as integer,",
						"          ProductID as integer,",
						"          Name as string,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          StandardCost as decimal(19,4),",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          Weight as decimal(18,0),",
						"          ProductCategory as integer,",
						"          ProductModelID as integer,",
						"          StartDate as date,",
						"          EndDate as date,",
						"          iscurrent as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ProductID,",
						"          Name,",
						"          ProductNumber,",
						"          Color,",
						"          StandardCost,",
						"          ListPrice,",
						"          Size,",
						"          Weight,",
						"          ProductCategory = ProductCategoryID,",
						"          ProductModelID,",
						"          StartDate,",
						"          iscurrent = isActive",
						"     )) ~> sinkChanged"
					]
				}
			},
			"dependsOn": []
		}
	]
}